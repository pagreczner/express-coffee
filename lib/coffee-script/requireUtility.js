// Generated by CoffeeScript 1.7.1
(function() {
  var fs, functionReader, requiredFileReader, _;

  fs = require('fs');

  _ = require('lodash');

  requiredFileReader = require('./requiredFileReader');

  functionReader = require('./requiredFileFunctionReader');

  module.exports = {
    importRequires: function(localContext, workingDir) {
      var contextName, e, fileNames, functionDatums, functionName, internalRequires, manualHash, params, remaining, requireIters, swagg, uniqInternals, _ref, _ref1;
      workingDir = this.ensureWorkingDirIsServer(workingDir);
      fileNames = [];
      manualHash = {};
      this.betterWalkTree(workingDir, fileNames);
      internalRequires = [];
      _.each(fileNames, function(fileName) {
        var additionalInternalRequires, fileFunctionHash;
        additionalInternalRequires = requiredFileReader.determineRequires(fileName);
        fileFunctionHash = functionReader.createFunctionHash(fileName);
        manualHash[fileFunctionHash[0]] = {
          params: fileFunctionHash[1],
          swagger: fileFunctionHash[2]
        };
        return _.each(additionalInternalRequires, function(add) {
          return internalRequires.push(add);
        });
      });
      uniqInternals = _.uniq(internalRequires, function(ir) {
        return ir.join(",");
      });
      uniqInternals = _.sortBy(uniqInternals, function(ui) {
        if (ui[3] != null) {
          return 0;
        } else {
          return 1;
        }
      });
      requireIters = 0;
      while ((requireIters < 3) && (uniqInternals.length > 0)) {
        remaining = [];
        _.each(uniqInternals, function(uiRequire) {
          var e;
          try {
            if (uiRequire[3] != null) {
              if (uiRequire[3] === 'eval') {
                localContext["eval"](uiRequire[0]);
              }
              if (uiRequire[3] === 'named_eval') {
                localContext[uiRequire[1]] = localContext["eval"](uiRequire[0]);
              }
            } else {
              if (uiRequire[2]) {
                localContext[uiRequire[1]] = eval("require('" + uiRequire[0] + "')");
              } else {
                localContext[uiRequire[1]] = localContext["eval"]("require('" + uiRequire[0] + "')");
              }
            }
            return console.log("Loaded: " + uiRequire);
          } catch (_error) {
            e = _error;
            return remaining.push(uiRequire);
          }
        });
        uniqInternals = remaining;
        requireIters++;
      }
      if (uniqInternals.length > 0) {
        console.log("" + uniqInternals.length + " Modules failed to load: ");
        console.log((_.collect(uniqInternals, function(ui) {
          return ui[1];
        })).join(","));
      }
      localContext.fid = eval("id= {userUid: 'anonymous', groupUid: 'anonymous'}");
      localContext.cres = null;
      localContext.dfc = function(err, args) {
        if (err) {
          localContext.cres = err;
        } else {
          localContext.cres = args;
        }
        return console.log(args);
      };
      localContext.LD = require('lodash');
      for (contextName in manualHash) {
        functionDatums = manualHash[contextName];
        try {
          localContext[contextName]['__man__'] = functionDatums.params;
          localContext[contextName]['__swag__'] = functionDatums.swagger;
        } catch (_error) {
          e = _error;
        }
        _ref = functionDatums.params;
        for (functionName in _ref) {
          params = _ref[functionName];
          try {
            localContext[contextName][functionName]['__man__'] = "" + contextName + "." + functionName + " (" + (params.join(', ')) + ")";
          } catch (_error) {
            e = _error;
          }
        }
        _ref1 = functionDatums.swagger;
        for (functionName in _ref1) {
          swagg = _ref1[functionName];
          try {
            localContext[contextName][functionName]['__swag__'] = swagg;
          } catch (_error) {
            e = _error;
          }
        }
      }
      localContext.swag = function(obj) {
        var swag, _swag;
        swag = obj.__swag__;
        if (swag != null) {
          if (typeof swag === 'string') {
            console.log(swag);
          } else {
            if (typeof swag === 'object') {
              for (functionName in swag) {
                _swag = swag[functionName];
                console.log("" + functionName + "\n--------------");
                if ((_swag == null) || (_swag === "")) {
                  console.log("No Swagger Entry Available.\n");
                }
              }
            }
          }
        } else {
          console.log("No Swagger Entry Available.");
        }
        return null;
      };
      localContext.man_partial = function(obj) {
        var data, _ref2;
        if (obj.__man__ != null) {
          data = obj.__man__;
          if (typeof data === 'string') {
            console.log(obj.__man__);
          } else {
            if (typeof data === 'object') {
              _ref2 = obj.__man__;
              for (functionName in _ref2) {
                params = _ref2[functionName];
                console.log("" + functionName + " (" + (params.join(', ')) + ")");
              }
            }
          }
        } else {
          console.log("No Manual Entry Available.");
        }
        return null;
      };
      localContext.man = function(obj) {
        localContext.swag(obj);
        console.log("Usage:");
        return localContext.man_partial(obj);
      };
      console.log("****************************************");
      console.log("Welcome to the expressCoffee console!");
      console.log("Helpers:");
      console.log("\t* fid: returns a fake id Object");
      console.log("\t* dfc: a default callback that returns either the error or successful arguments to the response.");
      console.log("\t* cres: the result of a callback (either error or the success arguments)");
      console.log("\t* man object.funcName: returns the parameters needed to pass to the function.");
      return console.log("Done Loading Express Coffee...(press enter to start using)...");
    },
    ensureWorkingDirIsServer: function(workingDir) {
      if (workingDir[workingDir.length - 1] === "/") {
        workingDir = workingDir.slice(0, -1);
      }
      if (workingDir.split("/").last === "server") {
        return workingDir;
      }
      return workingDir + "/server";
    },
    isRequirableFile: function(fileName) {
      var extension, filterable_extensions, filterable_substrings, isOk;
      extension = _(fileName.split('.')).last();
      filterable_extensions = ["jade", "json", "tpl", "gitignore"];
      if (_(filterable_extensions).contains(extension)) {
        return false;
      }
      filterable_substrings = {
        "Test.coffee": "Test.coffee"
      };
      isOk = true;
      _.each(filterable_substrings, function(filterable_substring) {
        if (!(fileName.indexOf(filterable_substring) < 0)) {
          return isOk = false;
        }
      });
      if (!isOk) {
        return false;
      }
      return true;
    },
    betterWalkTree: function(currentDir, fileNames) {
      var files;
      if (fileNames == null) {
        fileNames = [];
      }
      files = fs.readdirSync(currentDir);
      _.each(files, (function(_this) {
        return function(file) {
          var fileStat, relativePath;
          relativePath = "" + currentDir + "/" + file;
          fileStat = fs.statSync(relativePath);
          if (fileStat.isDirectory()) {
            return _this.betterWalkTree(relativePath, fileNames);
          } else {
            if (_this.isRequirableFile(file)) {
              return fileNames.push(relativePath);
            }
          }
        };
      })(this));
      return fileNames;
    }
  };

}).call(this);
