// Generated by CoffeeScript 1.7.1
(function() {
  var commentUtilityBaseObj, fs, swaggerUtilityBaseObj, _;

  fs = require('fs');

  _ = require('lodash');

  swaggerUtilityBaseObj = require('./swaggerUtility');

  commentUtilityBaseObj = require('./commentUtility');

  module.exports = {
    createFunctionHash: function(absoluteFilePath) {
      var commentMapper, commentUtil, fileCode, functionMap, lines, swaggerMapper, swaggerUtil;
      fileCode = fs.readFileSync(absoluteFilePath, 'utf8');
      lines = fileCode.split(/\n/);
      swaggerUtil = new swaggerUtilityBaseObj();
      swaggerMapper = {};
      commentUtil = new commentUtilityBaseObj();
      commentMapper = {};
      functionMap = {};
      _.each(lines, (function(_this) {
        return function(line) {
          var functionParams;
          swaggerUtil.addLine(line);
          commentUtil.addLine(line);
          line = _this.cleanLine(line);
          if (_this.isFunctionLine(line)) {
            functionParams = _this.getFunctionParams(line);
            functionMap[_this.getFunctionName(line)] = _this.getFunctionParams(line);
            swaggerMapper[_this.getFunctionName(line)] = swaggerUtil.getSwaggerDoc();
            swaggerUtil.reset();
            commentMapper[_this.getFunctionName(line)] = commentUtil.getCommentDoc();
            return commentUtil.reset();
          }
        };
      })(this));
      return [this.getFileName(absoluteFilePath), functionMap, swaggerMapper, commentMapper];
    },
    isFunctionLine: function(line) {
      var hasEndingArrow, splitByColon;
      hasEndingArrow = line.indexOf("->") >= 0;
      splitByColon = line.split(':').length === 2;
      return splitByColon && hasEndingArrow;
    },
    getFunctionParams: function(line) {
      var arrowIndex, colonIndex, finalParams, paramArea, params;
      colonIndex = line.indexOf(":");
      arrowIndex = line.indexOf("->");
      paramArea = line.slice(colonIndex + 1, arrowIndex);
      paramArea = paramArea.replace(/\(/g, '').replace(/\)/g, '');
      params = paramArea.split(',');
      return finalParams = _.map(params, function(param) {
        return param.trim();
      });
    },
    getFunctionName: function(line) {
      return line.split(':')[0].trim();
    },
    cleanLine: function(line) {
      line = line.trim();
      line = line.replace(/\ \ /g, ' ').replace(/\ \ /g, ' ').replace(/\t/g, ' ');
      return line;
    },
    getFileName: function(absoluteFilePath) {
      var coffeeFile, fileName;
      coffeeFile = _(absoluteFilePath.split("/")).last();
      fileName = coffeeFile.split('.')[0];
      return fileName;
    }
  };

}).call(this);
