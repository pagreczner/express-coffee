// Generated by CoffeeScript 1.7.1
(function() {
  var fs, _;

  fs = require('fs');

  _ = require('lodash');

  module.exports = {
    determineRequires: function(absoluteFilePath) {
      var currentWorkingDir, fileCode, lines, requirables;
      fileCode = fs.readFileSync(absoluteFilePath, 'utf8');
      lines = fileCode.split(/\n/);
      currentWorkingDir = this.getWorkingDir(absoluteFilePath);
      requirables = [];
      _.each(lines, (function(_this) {
        return function(line) {
          var requirableTriplet, requireOfInterest;
          if (_this.isRequirable(line)) {
            if (line.indexOf("dotenv") >= 0) {
              return requirables.push(["require('dotenv').load()", 'dotenv', false, 'eval']);
            } else {
              if (_this.isEvalRequire(currentWorkingDir, line)) {
                return requirables.push(_this.getEvalRequire(currentWorkingDir, line));
              } else {
                requireOfInterest = _this.getRequirePortion(line);
                requirableTriplet = _this.parseRequire(currentWorkingDir, requireOfInterest);
                return requirables.push(requirableTriplet);
              }
            }
          }
        };
      })(this));
      return requirables;
    },
    isRequirable: function(line) {
      if (!this.isARequire(line)) {
        return false;
      }
      return true;
    },
    getWorkingDir: function(filePath) {
      filePath = filePath.trim();
      filePath = _(filePath.split("/").slice(0, -1)).join("/");
      filePath = "/" + filePath;
      return filePath.replace("//", "/");
    },
    isRelativeRequire: function(line) {
      if ((line.indexOf("./") >= 0) || (line.indexOf("../") >= 0)) {
        return true;
      }
      return false;
    },
    goNextLevelUp: function(workingDir) {
      workingDir = _(workingDir.split("/").slice(0, -1)).join("/");
      return workingDir;
    },
    parseRequire: function(workingDir, interest) {
      var exactInterest, realInterest, realWorkingDir;
      if (!this.isRelativeRequire(interest)) {
        return [interest, interest, false];
      }
      if (interest.indexOf("./") === 0) {
        realInterest = interest.replace("./", "");
        exactInterest = _(realInterest.split("/")).last();
        return ["" + workingDir + "/" + realInterest, exactInterest, true];
      }
      realWorkingDir = workingDir;
      while (interest.indexOf("../") >= 0) {
        realWorkingDir = this.goNextLevelUp(realWorkingDir);
        interest = interest.replace("../", "");
      }
      realInterest = _(interest.split("/")).last();
      return ["" + realWorkingDir + "/" + interest, realInterest, true];
    },
    isEvalRequire: function(workingDir, line) {
      var dotIndex, requireIndex, requirePortion, startParen;
      requireIndex = line.indexOf("require");
      requirePortion = line.slice(requireIndex);
      startParen = requirePortion["require".length];
      if (startParen !== "(") {
        return false;
      }
      dotIndex = requirePortion.indexOf(".", requirePortion.indexOf(")"));
      return dotIndex >= 0;
    },
    getEvalRequire: function(workingDir, line) {
      var commentHashTag, dotIndex, evalPortion, requireIndex, requireName, requirePortion, startParen;
      requireIndex = line.indexOf("require");
      requirePortion = line.slice(requireIndex);
      startParen = requirePortion["require".length];
      dotIndex = requirePortion.indexOf(".", requirePortion.indexOf(")"));
      commentHashTag = requirePortion.indexOf("#");
      evalPortion = null;
      if (commentHashTag > 0) {
        evalPortion = requirePortion.slice(0, commentHashTag).trim();
      } else {
        evalPortion = requirePortion.trim();
      }
      requireName = line.split("=")[0].trim();
      return [evalPortion, requireName, false, 'named_eval'];
    },
    getRequirePortion: function(line) {
      var requireIndex, requirePath, requirePortion;
      requireIndex = line.indexOf("require");
      requirePortion = line.slice(requireIndex);
      requirePortion = requirePortion.replace(/\(/g, ' ').replace(/\)/g, ' ');
      requirePath = requirePortion.slice("require".length).trim();
      requirePath = requirePath.replace(/\'/g, '').replace(/\"/g, '');
      return requirePath;
    },
    isARequire: function(line) {
      if (line.indexOf("= require") >= 0) {
        return true;
      }
      if (line.trim().indexOf("require") === 0) {
        return true;
      }
      return false;
    }
  };

}).call(this);
